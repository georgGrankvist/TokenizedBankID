package wrapper;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TokenizedBankID extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600f81526020017f546f6b656e697a656442616e6b494400000000000000000000000000000000008152506040518060400160405280600681526020017f42616e6b49440000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000f9565b508060019080519060200190620000af929190620000f9565b50505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200020e565b8280546200010790620001d8565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001f157607f821691505b60208210811415620002085762000207620001a9565b5b50919050565b612f77806200021e6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a2578063b88d4fde11610071578063b88d4fde146102c8578063c87b56dd146102e4578063ce2f67a214610314578063e985e9c514610332578063eacabe14146103625761010b565b80636352211e1461022e57806370a082311461025e57806395d89b411461028e578063a22cb465146102ac5761010b565b806323b872dd116100de57806323b872dd146101aa578063421b2d8b146101c657806342842e0e146101e25780634d813120146101fe5761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611bdb565b610392565b6040516101379190611c23565b60405180910390f35b610148610474565b6040516101559190611cd7565b60405180910390f35b61017860048036038101906101739190611d2f565b610506565b6040516101859190611d9d565b60405180910390f35b6101a860048036038101906101a39190611de4565b61058b565b005b6101c460048036038101906101bf9190611e24565b6106a3565b005b6101e060048036038101906101db9190611e77565b610703565b005b6101fc60048036038101906101f79190611e24565b6107ee565b005b61021860048036038101906102139190611e77565b61080e565b6040516102259190611c23565b60405180910390f35b61024860048036038101906102439190611d2f565b610869565b6040516102559190611d9d565b60405180910390f35b61027860048036038101906102739190611e77565b61091b565b6040516102859190611eb3565b60405180910390f35b6102966109d3565b6040516102a39190611cd7565b60405180910390f35b6102c660048036038101906102c19190611efa565b610a65565b005b6102e260048036038101906102dd919061206f565b610a7b565b005b6102fe60048036038101906102f99190611d2f565b610add565b60405161030b9190611cd7565b60405180910390f35b61031c610c2f565b6040516103299190611c23565b60405180910390f35b61034c600480360381019061034791906120f2565b610cc6565b6040516103599190611c23565b60405180910390f35b61037c600480360381019061037791906121d3565b610d5a565b6040516103899190611eb3565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061045d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061046d575061046c82610de1565b5b9050919050565b6060600080546104839061225e565b80601f01602080910402602001604051908101604052809291908181526020018280546104af9061225e565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050905090565b600061051182610e4b565b610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790612302565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059682610869565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90612394565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610626610eb7565b73ffffffffffffffffffffffffffffffffffffffff16148061065557506106548161064f610eb7565b610cc6565b5b610694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068b90612426565b60405180910390fd5b61069e8383610ebf565b505050565b6106b46106ae610eb7565b82610f78565b6106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea906124b8565b60405180910390fd5b6106fe838383611056565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078a90612524565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61080983838360405180602001604052806000815250610a7b565b505050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905080915050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610909906125b6565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612648565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109e29061225e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0e9061225e565b8015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b5050505050905090565b610a77610a70610eb7565b83836112bd565b5050565b610a8c610a86610eb7565b83610f78565b610acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac2906124b8565b60405180910390fd5b610ad78484848461142a565b50505050565b6060610ae882610e4b565b610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906126da565b60405180910390fd5b6000600660008481526020019081526020016000208054610b479061225e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b739061225e565b8015610bc05780601f10610b9557610100808354040283529160200191610bc0565b820191906000526020600020905b815481529060010190602001808311610ba357829003601f168201915b505050505090506000610bd1611486565b9050600081511415610be7578192505050610c2a565b600082511115610c1c578082604051602001610c04929190612736565b60405160208183030381529060405292505050610c2a565b610c258461149d565b925050505b919050565b600033600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb5906127cc565b60405180910390fd5b600191505090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060011515610d698461080e565b151514610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da2906127cc565b60405180910390fd5b610db56009611544565b6000610dc1600961155a565b9050610dcd8482611568565b610dd78184611742565b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f3283610869565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610f8382610e4b565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb99061285e565b60405180910390fd5b6000610fcd83610869565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061103c57508373ffffffffffffffffffffffffffffffffffffffff1661102484610506565b73ffffffffffffffffffffffffffffffffffffffff16145b8061104d575061104c8185610cc6565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661107682610869565b73ffffffffffffffffffffffffffffffffffffffff16146110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c3906128f0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390612982565b60405180910390fd5b6111478383836117b6565b611152600082610ebf565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111a291906129d1565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f99190612a05565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46112b88383836117bb565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561132c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132390612aa7565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161141d9190611c23565b60405180910390a3505050565b611435848484611056565b611441848484846117c0565b611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790612b39565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606114a882610e4b565b6114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de90612bcb565b60405180910390fd5b60006114f1611486565b90506000815111611511576040518060200160405280600081525061153c565b8061151b84611948565b60405160200161152c929190612736565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cf90612c37565b60405180910390fd5b6115e181610e4b565b15611621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161890612ca3565b60405180910390fd5b61162d600083836117b6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167d9190612a05565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461173e600083836117bb565b5050565b61174b82610e4b565b61178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190612d35565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906117b1929190611acc565b505050565b505050565b505050565b60006117e18473ffffffffffffffffffffffffffffffffffffffff16611aa9565b1561193b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261180a610eb7565b8786866040518563ffffffff1660e01b815260040161182c9493929190612daa565b6020604051808303816000875af192505050801561186857506040513d601f19601f820116820180604052508101906118659190612e0b565b60015b6118eb573d8060008114611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b506000815114156118e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118da90612b39565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611940565b600190505b949350505050565b60606000821415611990576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611aa4565b600082905060005b600082146119c25780806119ab90612e38565b915050600a826119bb9190612eb0565b9150611998565b60008167ffffffffffffffff8111156119de576119dd611f44565b5b6040519080825280601f01601f191660200182016040528015611a105781602001600182028036833780820191505090505b5090505b60008514611a9d57600182611a2991906129d1565b9150600a85611a389190612ee1565b6030611a449190612a05565b60f81b818381518110611a5a57611a59612f12565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611a969190612eb0565b9450611a14565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ad89061225e565b90600052602060002090601f016020900481019282611afa5760008555611b41565b82601f10611b1357805160ff1916838001178555611b41565b82800160010185558215611b41579182015b82811115611b40578251825591602001919060010190611b25565b5b509050611b4e9190611b52565b5090565b5b80821115611b6b576000816000905550600101611b53565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bb881611b83565b8114611bc357600080fd5b50565b600081359050611bd581611baf565b92915050565b600060208284031215611bf157611bf0611b79565b5b6000611bff84828501611bc6565b91505092915050565b60008115159050919050565b611c1d81611c08565b82525050565b6000602082019050611c386000830184611c14565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c78578082015181840152602081019050611c5d565b83811115611c87576000848401525b50505050565b6000601f19601f8301169050919050565b6000611ca982611c3e565b611cb38185611c49565b9350611cc3818560208601611c5a565b611ccc81611c8d565b840191505092915050565b60006020820190508181036000830152611cf18184611c9e565b905092915050565b6000819050919050565b611d0c81611cf9565b8114611d1757600080fd5b50565b600081359050611d2981611d03565b92915050565b600060208284031215611d4557611d44611b79565b5b6000611d5384828501611d1a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d8782611d5c565b9050919050565b611d9781611d7c565b82525050565b6000602082019050611db26000830184611d8e565b92915050565b611dc181611d7c565b8114611dcc57600080fd5b50565b600081359050611dde81611db8565b92915050565b60008060408385031215611dfb57611dfa611b79565b5b6000611e0985828601611dcf565b9250506020611e1a85828601611d1a565b9150509250929050565b600080600060608486031215611e3d57611e3c611b79565b5b6000611e4b86828701611dcf565b9350506020611e5c86828701611dcf565b9250506040611e6d86828701611d1a565b9150509250925092565b600060208284031215611e8d57611e8c611b79565b5b6000611e9b84828501611dcf565b91505092915050565b611ead81611cf9565b82525050565b6000602082019050611ec86000830184611ea4565b92915050565b611ed781611c08565b8114611ee257600080fd5b50565b600081359050611ef481611ece565b92915050565b60008060408385031215611f1157611f10611b79565b5b6000611f1f85828601611dcf565b9250506020611f3085828601611ee5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f7c82611c8d565b810181811067ffffffffffffffff82111715611f9b57611f9a611f44565b5b80604052505050565b6000611fae611b6f565b9050611fba8282611f73565b919050565b600067ffffffffffffffff821115611fda57611fd9611f44565b5b611fe382611c8d565b9050602081019050919050565b82818337600083830152505050565b600061201261200d84611fbf565b611fa4565b90508281526020810184848401111561202e5761202d611f3f565b5b612039848285611ff0565b509392505050565b600082601f83011261205657612055611f3a565b5b8135612066848260208601611fff565b91505092915050565b6000806000806080858703121561208957612088611b79565b5b600061209787828801611dcf565b94505060206120a887828801611dcf565b93505060406120b987828801611d1a565b925050606085013567ffffffffffffffff8111156120da576120d9611b7e565b5b6120e687828801612041565b91505092959194509250565b6000806040838503121561210957612108611b79565b5b600061211785828601611dcf565b925050602061212885828601611dcf565b9150509250929050565b600067ffffffffffffffff82111561214d5761214c611f44565b5b61215682611c8d565b9050602081019050919050565b600061217661217184612132565b611fa4565b90508281526020810184848401111561219257612191611f3f565b5b61219d848285611ff0565b509392505050565b600082601f8301126121ba576121b9611f3a565b5b81356121ca848260208601612163565b91505092915050565b600080604083850312156121ea576121e9611b79565b5b60006121f885828601611dcf565b925050602083013567ffffffffffffffff81111561221957612218611b7e565b5b612225858286016121a5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061227657607f821691505b6020821081141561228a5761228961222f565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006122ec602c83611c49565b91506122f782612290565b604082019050919050565b6000602082019050818103600083015261231b816122df565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061237e602183611c49565b915061238982612322565b604082019050919050565b600060208201905081810360008301526123ad81612371565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612410603883611c49565b915061241b826123b4565b604082019050919050565b6000602082019050818103600083015261243f81612403565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006124a2603183611c49565b91506124ad82612446565b604082019050919050565b600060208201905081810360008301526124d181612495565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061250e602083611c49565b9150612519826124d8565b602082019050919050565b6000602082019050818103600083015261253d81612501565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006125a0602983611c49565b91506125ab82612544565b604082019050919050565b600060208201905081810360008301526125cf81612593565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612632602a83611c49565b915061263d826125d6565b604082019050919050565b6000602082019050818103600083015261266181612625565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b60006126c4603183611c49565b91506126cf82612668565b604082019050919050565b600060208201905081810360008301526126f3816126b7565b9050919050565b600081905092915050565b600061271082611c3e565b61271a81856126fa565b935061272a818560208601611c5a565b80840191505092915050565b60006127428285612705565b915061274e8284612705565b91508190509392505050565b7f57686974656c6973743a20596f75206e65656420746f2062652077686974656c60008201527f6973746564000000000000000000000000000000000000000000000000000000602082015250565b60006127b6602583611c49565b91506127c18261275a565b604082019050919050565b600060208201905081810360008301526127e5816127a9565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612848602c83611c49565b9150612853826127ec565b604082019050919050565b600060208201905081810360008301526128778161283b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006128da602583611c49565b91506128e58261287e565b604082019050919050565b60006020820190508181036000830152612909816128cd565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061296c602483611c49565b915061297782612910565b604082019050919050565b6000602082019050818103600083015261299b8161295f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129dc82611cf9565b91506129e783611cf9565b9250828210156129fa576129f96129a2565b5b828203905092915050565b6000612a1082611cf9565b9150612a1b83611cf9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a5057612a4f6129a2565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612a91601983611c49565b9150612a9c82612a5b565b602082019050919050565b60006020820190508181036000830152612ac081612a84565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b23603283611c49565b9150612b2e82612ac7565b604082019050919050565b60006020820190508181036000830152612b5281612b16565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612bb5602f83611c49565b9150612bc082612b59565b604082019050919050565b60006020820190508181036000830152612be481612ba8565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612c21602083611c49565b9150612c2c82612beb565b602082019050919050565b60006020820190508181036000830152612c5081612c14565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612c8d601c83611c49565b9150612c9882612c57565b602082019050919050565b60006020820190508181036000830152612cbc81612c80565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612d1f602e83611c49565b9150612d2a82612cc3565b604082019050919050565b60006020820190508181036000830152612d4e81612d12565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d7c82612d55565b612d868185612d60565b9350612d96818560208601611c5a565b612d9f81611c8d565b840191505092915050565b6000608082019050612dbf6000830187611d8e565b612dcc6020830186611d8e565b612dd96040830185611ea4565b8181036060830152612deb8184612d71565b905095945050505050565b600081519050612e0581611baf565b92915050565b600060208284031215612e2157612e20611b79565b5b6000612e2f84828501612df6565b91505092915050565b6000612e4382611cf9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e7657612e756129a2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ebb82611cf9565b9150612ec683611cf9565b925082612ed657612ed5612e81565b5b828204905092915050565b6000612eec82611cf9565b9150612ef783611cf9565b925082612f0757612f06612e81565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220c594ca371b43e871ba655a364e99c6e62aa831bd70a42f71180f54d08d73fe9964736f6c634300080b0033";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_EXAMPLEFUNCTION = "exampleFunction";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_VERIFYUSER = "verifyUser";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected TokenizedBankID(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TokenizedBankID(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TokenizedBankID(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TokenizedBankID(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String _addressToWhitelist) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressToWhitelist)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> exampleFunction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXAMPLEFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> verifyUser(String _whitelistedAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERIFYUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_whitelistedAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, String tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TokenizedBankID load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenizedBankID(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TokenizedBankID load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TokenizedBankID(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TokenizedBankID load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TokenizedBankID(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TokenizedBankID load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TokenizedBankID(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TokenizedBankID> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenizedBankID.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TokenizedBankID> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TokenizedBankID.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenizedBankID> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenizedBankID.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TokenizedBankID> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TokenizedBankID.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
